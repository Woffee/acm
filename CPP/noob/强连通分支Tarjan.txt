/* 
那么如何确定强连通分量的根，在这里我们维护两个数组，一个是indx[1..n]，一个是mlik[1..n]，
其中indx[i]表示顶点i开始访问时间，mlik[i]为与顶点i邻接的顶点未删除顶点j的mlik[j]和mlik[i]的最小值(mlik[i]初始化为indx[i])。
这样，在一次深搜的回溯过程中，如果发现mlik[i]==indx[i]那么，当前顶点就是一个强连通分量的根，为什么呢？
因为如果它不是强连通分量的根，那么它一定是属于另一个强连通分量，而且它的根是当前顶点的祖宗，
那么存在包含当前顶点的到其祖宗的回路，可知mlik[i]一定被更改为一个比indx[i]更小的值。  
*/
#include<stdio.h>  
#include<vector>  
using namespace std;  
#define MY_MAX 1004  
#define min(a,b) ((a)<(b)?(a):(b))  
bool visited[MY_MAX], instack[MY_MAX];  //标记顶点是否被访问过，以及是否在栈中
int stack[MY_MAX], top;     //‘栈’，用数组代替。top依然表示栈顶元素。
//int N, M;  
vector<int> graph[MY_MAX];  //  向量graph[i]就代表与i点直接相连的所有点
vector<int> belong[MY_MAX];   // 向量belong[i]就代表以i点为根的深搜树，即一个强连通分支。
int dfn[MY_MAX], low[MY_MAX];  //dfn[i]为上面的indx[],low[]为mlik[]
int INDEX, num; //num记录有多少个联通分支。 
void tarjan(int u)  
{      
    int v;      
    dfn[u] = low[u] = INDEX++;      
    stack[++top] = u;      
    instack[u] = true;      
    visited[u] = true;      //以上四行是对一个新发现的节点初始化处理。
    for(size_t i=0; i<graph[u].size(); ++i)  
    {          
        v = graph[u][i];          
        if(!visited[v])  //如果v为被访问过。
        {              
            tarjan(v);              
            low[u] = min(low[u], low[v]);          
        }          
        else if(instack[v])   //已经被访问了并且还呆在栈中           
            low[u] = min(low[u], dfn[v]);      
    }      
    if(dfn[u] == low[u])  //如果相等则u是一个深搜树的根，u的所有子孙是一个连通分支。
    {  
        ++num;  
        belong[num].push_back(u);  
        do  
        {              
            v = stack[top--];   
            belong[num].push_back(v);  
            instack[v] = false;          
        }while(v != u);      
    }  
//  printf("%d/n",num);  
}  
int main()  
{  
    int n, m, i, a, b, j;  
    while(scanf("%d %d",&n, &m)!=EOF)  
    {  
        memset(low,0,sizeof(low));  
        memset(stack,0,sizeof(stack));  
        memset(dfn,0,sizeof(dfn));  
        memset(instack,0,sizeof(instack));  
        memset(visited,0,sizeof(visited));  
        INDEX = 0;  
        top = 0;  
        num = 0;  
        for(i=1; i<=n; i++)  
            graph[i].clear();  
        for(i=1; i<=m; i++)  
        {  
            scanf("%d %d",&a, &b);  
            graph[a].push_back(b);  //a到b直接相连
        }  
        for(i=1; i<=n; i++)  
            if(!visited[i])  
                tarjan(i);  
        printf("%d/n",num);  
        for(i=1; i<=num; i++)  
        {  
            for(j=1; j<belong[i].size(); j++)  
                printf("%d/t",belong[i][j]);  
            printf("/n");  
        }  
    }  
    return 0;  
}  